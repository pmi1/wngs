<?php

namespace AppBundle\Entity\Repository;

use AppBundle\Entity\User;
use AppBundle\Entity\RoleGroup;
use Doctrine\ORM\EntityRepository;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{

    /**
    * Получить список товаров
     *
     * @return QueryBuilder
     */
    public function getDesigners()
    {
        $em = $this->getEntityManager();
        $select = $em->createQueryBuilder()
            ->select('u')
            ->from(User::class, 'u')
            ->where('u.status=1 AND u.designer = 1')
            ->addOrderBy('u.ordering', 'ASC')
            ->addOrderBy('u.name', 'ASC');

        return $select;
    }

    /**
     * {@inheritdoc}
     */
    public function loadUserByUsername($username)
    {
        $userInfo = $this->createQueryBuilder('u')
            ->where('u.login = :login')
            ->setParameter('login', $username)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
        
        return $userInfo;
    }


    /**
     * {@inheritdoc}
     */
    public function getDesignersForMain()
    {
        $result = $this->createQueryBuilder('u')
            ->where('u.status = 1')
            ->andWhere('u.onMain = 1')
            ->addSelect('RAND() as HIDDEN rand')
            ->addOrderBy('rand')
            ->setMaxResults(4)
            ->getQuery()
            ->getResult();
        
        return $result;
    }

    /**
     * Метод инициализирует права для групп ролей текущего пользователя
     *
     * @param array $roleGroups набор идентификаторов групп ролей
     * @param string $rgHash хэш групп ролей
     */
    public function initRights($roleGroups, $rgHash)
    {
        $sql = "
            SELECT count(cr.cmf_role_group_combination_id) AS c
            FROM cmf_rights cr
            WHERE cr.cmf_role_group_combination_id = :hash
        ";
            
        $statement = $this->_em->getConnection()->prepare($sql);
        $statement->bindValue('hash', $rgHash);
        $statement->execute();
        
        $check = $statement->fetch();
        
        if (!$check["c"]) {
            $sql = "
                INSERT INTO cmf_rights(cmf_role_group_combination_id, script_id, is_read, is_write, is_insert, is_delete)
                SELECT :hash, cs.id, MAX(is_read) as is_read, MAX(is_write) as is_write, MAX(is_insert) as is_insert, MAX(is_delete) as is_delete
                FROM cmf_script cs
                LEFT JOIN role_script rs ON cs.id = rs.cmf_script_id
                LEFT JOIN privilege p ON p.role_id = rs.role_id
                WHERE cs.real_status = 1 AND p.roles_group_id IN (:groups) AND cs.deleted_at IS NULL
                GROUP BY cs.id
            ";
            
            $statement = $this->_em->getConnection()->prepare($sql);
            $statement->bindValue('hash', $rgHash);
            $statement->bindValue('groups', $roleGroups, "simple_array");
            $statement->execute();
        }
    }
}
